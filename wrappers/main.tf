module "wrapper" {
  source = "../"

  for_each = var.items

  apply_immediately                         = try(each.value.apply_immediately, var.defaults.apply_immediately, null)
  at_rest_encryption_enabled                = try(each.value.at_rest_encryption_enabled, var.defaults.at_rest_encryption_enabled, true)
  auth_token                                = try(each.value.auth_token, var.defaults.auth_token, null)
  auth_token_update_strategy                = try(each.value.auth_token_update_strategy, var.defaults.auth_token_update_strategy, null)
  auto_minor_version_upgrade                = try(each.value.auto_minor_version_upgrade, var.defaults.auto_minor_version_upgrade, null)
  automatic_failover_enabled                = try(each.value.automatic_failover_enabled, var.defaults.automatic_failover_enabled, null)
  availability_zone                         = try(each.value.availability_zone, var.defaults.availability_zone, null)
  az_mode                                   = try(each.value.az_mode, var.defaults.az_mode, null)
  cluster_id                                = try(each.value.cluster_id, var.defaults.cluster_id, "")
  cluster_mode                              = try(each.value.cluster_mode, var.defaults.cluster_mode, null)
  cluster_mode_enabled                      = try(each.value.cluster_mode_enabled, var.defaults.cluster_mode_enabled, false)
  create                                    = try(each.value.create, var.defaults.create, true)
  create_cluster                            = try(each.value.create_cluster, var.defaults.create_cluster, false)
  create_parameter_group                    = try(each.value.create_parameter_group, var.defaults.create_parameter_group, false)
  create_primary_global_replication_group   = try(each.value.create_primary_global_replication_group, var.defaults.create_primary_global_replication_group, false)
  create_replication_group                  = try(each.value.create_replication_group, var.defaults.create_replication_group, true)
  create_secondary_global_replication_group = try(each.value.create_secondary_global_replication_group, var.defaults.create_secondary_global_replication_group, false)
  create_security_group                     = try(each.value.create_security_group, var.defaults.create_security_group, true)
  create_subnet_group                       = try(each.value.create_subnet_group, var.defaults.create_subnet_group, true)
  data_tiering_enabled                      = try(each.value.data_tiering_enabled, var.defaults.data_tiering_enabled, null)
  description                               = try(each.value.description, var.defaults.description, null)
  engine                                    = try(each.value.engine, var.defaults.engine, "redis")
  engine_version                            = try(each.value.engine_version, var.defaults.engine_version, null)
  final_snapshot_identifier                 = try(each.value.final_snapshot_identifier, var.defaults.final_snapshot_identifier, null)
  global_replication_group_id               = try(each.value.global_replication_group_id, var.defaults.global_replication_group_id, null)
  global_replication_group_id_suffix        = try(each.value.global_replication_group_id_suffix, var.defaults.global_replication_group_id_suffix, null)
  ip_discovery                              = try(each.value.ip_discovery, var.defaults.ip_discovery, null)
  kms_key_arn                               = try(each.value.kms_key_arn, var.defaults.kms_key_arn, null)
  log_delivery_configuration = try(each.value.log_delivery_configuration, var.defaults.log_delivery_configuration, {
    slow-log = {
      destination_type = "cloudwatch-logs"
      log_format       = "json"
    }
  })
  maintenance_window             = try(each.value.maintenance_window, var.defaults.maintenance_window, null)
  multi_az_enabled               = try(each.value.multi_az_enabled, var.defaults.multi_az_enabled, false)
  network_type                   = try(each.value.network_type, var.defaults.network_type, null)
  node_type                      = try(each.value.node_type, var.defaults.node_type, null)
  notification_topic_arn         = try(each.value.notification_topic_arn, var.defaults.notification_topic_arn, null)
  num_cache_clusters             = try(each.value.num_cache_clusters, var.defaults.num_cache_clusters, null)
  num_cache_nodes                = try(each.value.num_cache_nodes, var.defaults.num_cache_nodes, 1)
  num_node_groups                = try(each.value.num_node_groups, var.defaults.num_node_groups, null)
  outpost_mode                   = try(each.value.outpost_mode, var.defaults.outpost_mode, null)
  parameter_group_description    = try(each.value.parameter_group_description, var.defaults.parameter_group_description, null)
  parameter_group_family         = try(each.value.parameter_group_family, var.defaults.parameter_group_family, "")
  parameter_group_name           = try(each.value.parameter_group_name, var.defaults.parameter_group_name, null)
  parameters                     = try(each.value.parameters, var.defaults.parameters, [])
  port                           = try(each.value.port, var.defaults.port, null)
  preferred_availability_zones   = try(each.value.preferred_availability_zones, var.defaults.preferred_availability_zones, [])
  preferred_cache_cluster_azs    = try(each.value.preferred_cache_cluster_azs, var.defaults.preferred_cache_cluster_azs, [])
  preferred_outpost_arn          = try(each.value.preferred_outpost_arn, var.defaults.preferred_outpost_arn, null)
  replicas_per_node_group        = try(each.value.replicas_per_node_group, var.defaults.replicas_per_node_group, null)
  replication_group_id           = try(each.value.replication_group_id, var.defaults.replication_group_id, null)
  security_group_description     = try(each.value.security_group_description, var.defaults.security_group_description, null)
  security_group_ids             = try(each.value.security_group_ids, var.defaults.security_group_ids, [])
  security_group_name            = try(each.value.security_group_name, var.defaults.security_group_name, null)
  security_group_names           = try(each.value.security_group_names, var.defaults.security_group_names, [])
  security_group_rules           = try(each.value.security_group_rules, var.defaults.security_group_rules, {})
  security_group_tags            = try(each.value.security_group_tags, var.defaults.security_group_tags, {})
  security_group_use_name_prefix = try(each.value.security_group_use_name_prefix, var.defaults.security_group_use_name_prefix, true)
  snapshot_arns                  = try(each.value.snapshot_arns, var.defaults.snapshot_arns, [])
  snapshot_name                  = try(each.value.snapshot_name, var.defaults.snapshot_name, null)
  snapshot_retention_limit       = try(each.value.snapshot_retention_limit, var.defaults.snapshot_retention_limit, null)
  snapshot_window                = try(each.value.snapshot_window, var.defaults.snapshot_window, null)
  subnet_group_description       = try(each.value.subnet_group_description, var.defaults.subnet_group_description, null)
  subnet_group_name              = try(each.value.subnet_group_name, var.defaults.subnet_group_name, null)
  subnet_ids                     = try(each.value.subnet_ids, var.defaults.subnet_ids, [])
  tags                           = try(each.value.tags, var.defaults.tags, {})
  timeouts                       = try(each.value.timeouts, var.defaults.timeouts, {})
  transit_encryption_enabled     = try(each.value.transit_encryption_enabled, var.defaults.transit_encryption_enabled, true)
  transit_encryption_mode        = try(each.value.transit_encryption_mode, var.defaults.transit_encryption_mode, null)
  user_group_ids                 = try(each.value.user_group_ids, var.defaults.user_group_ids, null)
  vpc_id                         = try(each.value.vpc_id, var.defaults.vpc_id, null)
}
